(begin
	
	;红黑树节点的定义
	;节点结构如下
	;(key (val (color (parent (left (right nil))))))
	(define nil (list 0 0 'black '() '() '()))
	
	(define (make-rb-node key val)
		(list key val 'red '() '() '())
	)
		
	(define (get-key rbnode)
		(car rbnode))
	
	(define (get-val rbnode)
		(cadr rbnode))
	
	(define (set-val! rbnode val)
		(set-car! (cdr rbnode) val))
	
	(define (get-color rbnode)
		(caddr rbnode))
	
	(define (set-color! rbnode color)
		(set-car! (cddr rbnode) color))
		
	(define (get-parent rbnode)
		(cadddr rbnode))	
	
	(define (set-parent! rbnode parent)
		(if (not (equal? rbnode nil))
		(set-car! (cdddr rbnode) parent)))
		
	(define (get-left rbnode)
		(car (cddddr rbnode)))
	
	(define (set-left! rbnode left)
		(if (not (equal? rbnode nil))
		(set-car! (cddddr rbnode) left)))
		
	(define (get-right rbnode)
		(cadr (cddddr rbnode)))
		
	(define (set-right! rbnode right)
		(if (not (equal? rbnode nil))
		(set-car! (cdr (cddddr rbnode)) right)))
	
	(define test-node (make-rb-node 1 2))
	
	(define (color-flip rbnode)
		(if (and (not (null? (get-left rbnode)))
				 (not (null? (get-right rbnode))))
			(begin (set-color! rbnode 'red)
				   (set-color! (get-left rbnode) 'black)
				   (set-color! (get-right rbnode) 'black)
					#t)
		#f)			
	)
	
	(define (default-cmp a b)
		(cond ((= a b) 0)
			  ((< a b) -1)
			  (else 1)))
	
	;红黑树定义
	;(root (size (cmp-function nil)))
	(define (make-rbtree comp-function)
		(list nil 0 comp-function nil)
	)
	
	;(define (get-dummy rbtree)
	;	(cadddr rbtree))
	
	(define (rbtree-get-root rbtree)
		(car rbtree))
	
	(define (rbtree-set-root! rbtree root)
		(set-car! rbtree root))
	
	(define (rbtree-get-size rbtree)
		(cadr rbtree))
		
	(define (rbtree-cmp-func rbtree)
		(caddr rbtree))
	
	(define (rbtree-insert rbtree key val)
		(define rbnode (make-rb-node key val))
		(define child_link '())
		(define parent nil)
		(define cmp (rbtree-cmp-func rbtree))
		(define (iter cur)
			(if (equal? cur nil) #t
				(begin
					(set! parent cur)
					(let ((ret (cmp key (get-key cur))))
					(cond ((= 0 ret) #f)
						  (else (if (< ret 0) (begin (set! child_link (cddddr cur))
													 (set! cur (get-left cur)))
											  (begin (set! child_link (cdr (cddddr cur)))
													 (set! cur (get-right cur))))		 
								(iter cur))))
				)))
		(if (not (iter (rbtree-get-root rbtree))) #f
			(begin
				(set-left! rbnode nil)
				(set-right! rbnode nil)
				(set-parent! rbnode parent)
				;(if (and (not (null? child_link)) (not (equal? (get-dummy rbtree) child_link))) 				
				;	(set-car! child_link rbnode))
				(if (not (null? child_link)) (set-car! child_link rbnode))
				(set-car! (cdr rbtree) (+ 1 (rbtree-get-size rbtree)))
				(if (= 1 (rbtree-get-size rbtree))(rbtree-set-root! rbtree rbnode))
				(insert-fix-up rbtree rbnode)
				#t
			))
	)
	
	(define (rbtree-find-imp rbtree key)
		(define (iter node)
			(define cmp (rbtree-cmp-func rbtree))
			(if (equal? node nil)'()
				(let ((ret (cmp key (get-key node))))
					(cond ((= 0 ret) node)
						  ((= -1 ret) (iter (get-left node)))
						  (else (iter (get-right node)))))))
		(if (= 0 (rbtree-get-size rbtree)) '()
			(iter (rbtree-get-root rbtree)))
	)
	
	(define (rbtree-find rbtree key)
		(define ret (rbtree-find-imp rbtree key))
		(if (null? ret) ret (get-val ret))
	)
	
	(define (rbtree-remove rbtree key)
		(define rbnode (rbtree-find-imp rbtree key))
		(if (null? rbnode)'()
			(rbtree-delete rbtree rbnode))
		rbnode	
	)
	
	(define (get-delete-node rbtree rbnode)
		(cond ((and (equal? (get-left rbnode) nil)
					(equal? (get-right rbnode) nil))rbnode)
			  ((not (equal? (get-right rbnode) nil)) (minimum rbtree (get-right rbnode)))		
			  (else (maxmum rbtree (get-left rbnode))))
	)
	
	(define (rbtree-delete rbtree rbnode)
		(define x (get-delete-node rbtree rbnode))
		(define parent (get-parent x))
		(define link '())
		(define z '())
		(define old_color 'red)
		(if (equal? x (get-left parent)) (set! link (cddddr parent))
			(set! link (cdr (cddddr parent))))
		(if (equal? x (get-left parent)) (set! z (get-left parent))
			(set! z (get-right parent)))		
		(cond ((not (equal? (get-left x) nil)) (set-car! link (get-left x)))
			  ((not (equal? (get-right x) nil)) (set-car! link (get-right x)))
			  (else (set-car! link nil)))
		(if (not (equal? z nil))(set-parent! z parent))
		(set-parent! x nil)
		(set-left! x nil)
		(set-right! x nil)
		(set! old_color (get-color x))
		(if (not (equal? x rbnode))
			(begin
				(let ((n_left (get-left rbnode))
					  (n_right (get-right rbnode))
					  (n_parent (get-parent rbnode)))
				(if (not (equal? n_left nil))
					(begin (set-parent! n_left x)(set-left! x n_left)))
				(if (not (equal? n_right nil))
					(begin (set-parent! n_right x)(set-right! x n_right)))
				(if (not (equal? n_parent nil))
					(begin (if (equal? rbnode (get-left n_parent))
								(set-left! n_parent x)
								(set-right! n_parent x))
						   (set-parent! x n_parent)))
				(set-color! x (get-color rbnode))
				(if (equal? (rbtree-get-root rbtree) rbnode)
					(rbtree-set-root! rbtree x)))
			))
		(set-car! (cdr rbtree) (- 1 (rbtree-get-size rbtree)))
		(if (= 0 (rbtree-get-size rbtree))(rbtree-set-root rbtree nil)
			(if (and (not (equal? z nil))(eq? old_color 'black))
				(delete-fix-up rbtree z)))		
	)
		
	(define (rotate-left rbtree rbnode)
		(define parent (get-parent rbnode))
		(define right (get-right rbnode))
		(if (not (equal? parent right))
			(begin
				(set-right! rbnode (get-left right))
				(set-parent! (get-left right) rbnode)
				(if (equal? (rbtree-get-root rbtree) rbnode) (rbtree-set-root! rbtree right)
					(begin
						(if (equal? rbnode (get-left parent))(set-left! parent right)
							(set-right! parent right))))
				(set-parent! right parent)
				(set-parent! rbnode right)
				(set-left! right rbnode)
			#t)
		#f)
	)
	
	(define (rotate-right rbtree rbnode)
		(define parent (get-parent rbnode))
		(define left (get-left rbnode))
		(if (not (equal? parent left))
			(begin
				(set-left! rbnode (get-right left))
				(set-parent! (get-right left) rbnode)
				(if (equal? (rbtree-get-root rbtree) rbnode) (rbtree-set-root! rbtree left)
					(begin
						(if (equal? rbnode (get-left parent))(set-left! parent left)
							(set-right! parent left))))
				(set-parent! left parent)
				(set-parent! rbnode left)
				(set-right! left rbnode)
			#t)
		#f)
	)
	
	(define (insert-fix-up rbtree rbnode)
		(define (iter)
			(if (eq? (get-color (get-parent rbnode)) 'black)
				(set-color! (rbtree-get-root rbtree) 'black)
				(begin
					(let ((parent (get-parent rbnode))(grand_parent (get-parent (get-parent rbnode))))
					(if (equal? parent (get-left grand_parent))
						(begin
							(let ((ancle (get-right grand_parent)))
							(if (eq? (get-color ancle) 'red)
								(begin (color-flip grand_parent) (set! rbnode grand_parent))
								(begin 
									(if (equal? rbnode (get-right parent))
										(begin (set! rbnode parent)(rotate-left rbtree rbnode)))
								 (set-color! parent 'black)
								 (set-color! (get-parent parent) 'red)
								 (rotate-right rbtree (get-parent parent)))))		
						)
						(begin
							(let ((ancle (get-left grand_parent)))
							(if (eq? (get-color ancle) 'red)
								(begin (color-flip grand_parent) (set! rbnode grand_parent))
								(begin 
									(if (equal? rbnode (get-left parent))
										(begin (set! rbnode parent)(rotate-right rbtree rbnode)))
								 (set-color! parent 'black)
								 (set-color! (get-parent parent) 'red)
								 (rotate-left rbtree (get-parent parent)))))							
						)))
					 (iter))))
		(iter)
	)

	(define (delete-fix-up rbtree rbnode)
		(define (iter)
			(if (not (and (not (equal? rbnode (rbtree-get-root rbtree)))
						  (not (equal? (get-color rbnode) 'red))))
				(set-color! rbnode 'black)
				(begin
					(let ((parent (get-parent rbnode)))
					(if (equal? rbnode (get-left parent))
						(begin
							(let ((w (get-right parent)))
							(if (eq? 'red (get-color w))
								(begin
									(set-color! w 'black)
									(set-color! parent 'red)
									(rotate-left rbtree parent)
									(set! w (get-right parent))))
							(if (and (eq? 'black (get-color (get-left w)))
									 (eq? 'black (get-color (get-right w))))
								(begin (set-color! w 'red)(set! rbnode w))
								(begin
									(if (eq? (get-color (get-right w)) 'black)
										(begin
											(set-color! (get-left w) 'black)
											(set-color! w 'red)
											(rotate-right rbtree w)
											(set! w (get-right parent))
										))
									(set-color! w (get-color parent))
									(set-color! parent 'black)
									(set-color! (get-right w) 'black)
									(rotate-left rbtree parent)
									(set! rbnode (rbtree-get-root rbtree))	
								))))
						(begin
							(let ((w (get-left parent)))
							(if (eq? 'red (get-color w))
								(begin
									(set-color! w 'black)
									(set-color! parent 'red)
									(rotate-right rbtree parent)
									(set! w (get-left parent))))
							(if (and (eq? 'black (get-color (get-left w)))
									 (eq? 'black (get-color (get-right w))))
								(begin (set-color! w 'red)(set! rbnode w))
								(begin
									(if (eq? (get-color (get-left w)) 'black)
										(begin
											(set-color! (get-right w) 'black)
											(set-color! w 'red)
											(rotate-left rbtree w)
											(set! w (get-left parent))
										))
									(set-color! w (get-color parent))
									(set-color! parent 'black)
									(set-color! (get-left w) 'black)
									(rotate-right rbtree parent)
									(set! rbnode (rbtree-get-root rbtree))	
								))))))					
					(iter))))
		(iter)
	)
	
	(define (minimum rbtree rbnode)
		(define (minimum-imp rbnode)
			(if (equal? (get-left rbnode) nil)
				rbnode
				(minimum-imp (get-left rbnode))))
		(minimum-imp rbnode))
		
	(define (maxmum rbtree rbnode)
		(define (maxmum-imp rbnode)
			(if (equal? (get-right rbnode) nil)
				rbnode
				(maxmum-imp (get-right rbnode))))
		(maxmum-imp rbnode))		
			
	(define (successor rbtree rbnode)
		(define (iter parent node)
			(if (and (not (equal? parent nil))
				     (equal? (get-right parent) node))
				(iter (get-parent parent) parent)
				parent))
		(if (not (equal? (get-right rbnode) nil))
			(minimum rbtree (get-right rbnode))
			(iter (get-parent rbnode) rbnode)))	
			
	(define (node-next rbtree rbnode)
		(if (null? rbnode) '()
			(begin
				(let ((succ (successor rbtree rbnode)))
					(if (equal? succ nil) '() succ))
			)))
	
	(define r (make-rbtree default-cmp))
	(rbtree-insert r 1 1)
	(rbtree-insert r 4 4)
	(rbtree-insert r 5 5)
	(rbtree-insert r 11 11)
	(rbtree-insert r 15 15)
	(rbtree-insert r 8 8)
	(rbtree-insert r 2 2)
	(rbtree-insert r 3 3)
	(rbtree-insert r 6 6)
	(rbtree-insert r 7 7)	
	
	(define (get-tree-data rbtree)
		(define (iter rbnode ret)
			(if (null? rbnode) ret
				(iter (node-next rbtree rbnode) (cons (get-val rbnode) ret)))
		)
		(reverse (iter (minimum rbtree (rbtree-get-root rbtree)) '()))
	)
)	